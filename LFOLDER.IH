
/*
 * This file was generated by the SOM Compiler.
 * FileName: lfolder.ih.
 * Generated using:
 *     SOM Precompiler spc: 1.22
 *     SOM Emitter emitih: 1.59
 */

#ifndef lfolder_ih
#define lfolder_ih


/*
 * Passthru lines: File: "C.ih", "before"
 */
#include <lfolderd.h>
#define INCL_WINWORKPLACE
#define INCL_BASE
#include <os2.h>
#include <string.h>

#include "lfolder.h"

/*
 * Set the scope of methods functions
 */
#ifndef SOM_Scope
#define SOM_Scope static
#endif

#ifndef SOM_CurrentClass
#define SOM_CurrentClass WPSLockedFolderCClassData.parentMtab
#endif

#define WPSLockedFolder_MaxNoMethods 0

/*
 * Instance data
 */
typedef struct {
	char szPassword[20];
} WPSLockedFolderData;

/*
 * Instance variable access macros
 */
#define _szPassword (somThis->szPassword)

/*
 * Getdata macro
 */
#define WPSLockedFolderGetData(somSelf) \
    ((WPSLockedFolderData *) \
        SOM_DataResolve(somSelf, WPSLockedFolderCClassData.instanceDataToken))

/*
 * Trace/Debug macro
 */
#ifndef WPSLockedFolderMethodDebug
#define WPSLockedFolderMethodDebug(c,m) SOMMethodDebug(c,m)
#endif

/*
 * Begin stuff that only goes in the primary file
 */
#ifdef WPSLockedFolder_Class_Source

/*
 * Current class macros for Instance and Meta classes.
 */
#undef SOMMeta
#define SOMMeta M_WPSLockedFolderCClassData.parentMtab
#undef SOMInstance
#define SOMInstance WPSLockedFolderCClassData.parentMtab

#ifndef M_WPSLockedFolder_Class_Source
#define M_WPSLockedFolder_Class_Source
#endif    /* M_WPSLockedFolder_Class_Source */

/*
 * Generate the Apply Stubs.
 */

/*
 * Overridden method: wpOpen
 */
#pragma linkage(wpOpen, system)
SOM_Scope HWND   SOMLINK wpOpen(WPSLockedFolder *somSelf,
		HWND hwndCnr,
		ULONG ulView,
		ULONG param);
#ifndef parent_wpOpen
static char *somMN_wpOpen = "wpOpen";
static somId somId_wpOpen = &somMN_wpOpen;
#define parent_wpOpen(somSelf,hwndCnr,ulView,param) \
	((SOM_ParentResolveE(WPObject, SOM_CurrentClass, wpOpen)) \
	 (somSelf,hwndCnr,ulView,param))
#endif
#define WPSLockedFolderParent_wpOpen parent_wpOpen

/*
 * Temporary class data structure used only in class creation
 */
static somClassDataStructure WPSLockedFoldertempClassData;

/*
 * Initialize the class data structure
 */
struct WPSLockedFolderClassDataStructure WPSLockedFolderClassData = {(SOMAny *) NULL};

/*
 * Define the C class data structure
 */
struct WPSLockedFolderCClassDataStructure WPSLockedFolderCClassData = {(somMethodTab *) NULL};

/*
 * Routines to create the class object
 */

/*
 * Declare the Override Methods table.
 */
static somOverrideMethod_t WPSLockedFolderOM[] = {
    {    &somId_wpOpen,
         (somMethodProc *) wpOpen    },
};

static void WPSLockedFoldersomInitializeClass ()
{
	int i;
	somOverrideMethod_t *omp;

/*
 * Override methods.
 */
	for (omp = WPSLockedFolderOM, i = 0; i < 1; omp++, i++)
	    _somOverrideSMethod (WPSLockedFoldertempClassData.classObject,
	        *(omp->methodId), omp->method);

}

#pragma linkage(WPSLockedFoldersomCreateClass, system)
static void SOMLINK WPSLockedFoldersomCreateClass(SOMClass *pClsObj,
                           SOMClass *mClsObj)
{
    WPSLockedFoldertempClassData.classObject = _somNew (mClsObj);
    _somInitClass (WPSLockedFoldertempClassData.classObject,
		"WPSLockedFolder",
		pClsObj,
		sizeof(WPSLockedFolderData),
		WPSLockedFolder_MaxNoMethods,
		WPSLockedFolder_MajorVersion,
		WPSLockedFolder_MinorVersion);
    WPSLockedFolderCClassData.instanceDataToken = 
	_somGetInstanceToken(WPSLockedFoldertempClassData.classObject);
    WPSLockedFoldersomInitializeClass();
    WPSLockedFolderCClassData.parentMtab =
	_somGetPClsMtab(WPSLockedFoldertempClassData.classObject);
    _somSetClassData(WPSLockedFoldertempClassData.classObject, (somClassDataStructure *)&WPSLockedFolderClassData);
    _somClassReady(WPSLockedFoldertempClassData.classObject);
    /* make newly created class object visible */
    WPSLockedFolderClassData.classObject = WPSLockedFoldertempClassData.classObject;
}

WPSLockedFolder * SOMLINK WPSLockedFolderNewClass (integer4 scemajorVersion,
		integer4 sceminorVersion)
{
    SOMClass *pClsObj;
    SOMClass *mClsObj;

    /* Check the version numbers */
    if (((scemajorVersion != 0) && 
         (scemajorVersion != WPSLockedFolder_MajorVersion)) ||
        ((sceminorVersion != 0) && 
         (sceminorVersion > WPSLockedFolder_MinorVersion))) {
	somPrintf("WPSLockedFolderNewClass: Error, bad version numbers.\n");
	SOM_Error(SOMERROR_BadVersion);
    }
    /* Don't do anything if class object is already created. */
    if (WPSLockedFolderClassData.classObject != (SOMAny *) NULL)
	return(WPSLockedFolderClassData.classObject);

    /* Make sure the environment is initialized. */
    if (SOMClassMgrObject == (SOMAny *) NULL) somEnvironmentNew();
    if (SOMClassMgrObject == (SOMAny *) NULL)
	SOM_Error(SOMERROR_CouldNotStartup);

    /* Get the parent class object. */
    WPFolderNewClass(1,2);	/* static reference */
    pClsObj = _somFindClass(SOMClassMgrObject,
		SOM_IdFromString("WPFolder"), 1, 2);
    if (pClsObj == (SOMClass *) NULL)
	SOM_Error(SOMERROR_NoParentClass);

    /* Use parent's metaclass */ 
    mClsObj = SOM_GetClass(pClsObj);

    somConstructClass(WPSLockedFoldersomCreateClass, pClsObj, mClsObj,
		     &WPSLockedFoldertempClassData);
    return (WPSLockedFolderClassData.classObject);
}

#endif                   /* WPSLockedFolder_Class_Source */

#endif       /* lfolder_ih */
